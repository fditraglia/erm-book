[["index.html", "Core Empirical Research Methods Preface Pre-requisites Why not Stata? Why not Matlab? Why R? Some Half-truths about R Why not Julia or Python?", " Core Empirical Research Methods Francis J. DiTraglia 2022-02-19 Preface You’ve probably heard that “the only way to learn how to do research is by doing research.” Like most familiar sayings, this one has contains a deep kernel of truth. You can’t learn applied econometrics by watching someone else do it: you have to roll up your sleeves, sit down at your computer, and get your hands dirty with real data. But I sometimes hear this phrase used in a different way, as an excuse for passing over practical skills in the graduate economics curriculum. “The sharpest students will figure this stuff out for themselves anyway” is a common refrain. Or perhaps “it’s only when students have a research question of their own that they’ll be motivated to learn.” Indeed: to do research you have to be something of an autodidact, capable of teaching yourself new skills on the fly. And there’s nothing like a pressing problem to provide the required impetus. But these arguments prove too much. Why teach microeconomic theory? Smart and motivated students can pick up any number of excellent textbooks and choose from a cornucopia of YouTube videos. Pre-requisites Why not Stata? Stata remains a popular choice among applied microeconomists. There’s a good chance that you have have encountered it in your undergraduate studies or working as a research assistant. In its favor, Stata is easy-to-use, and makes it relatively painless to implement “textbook” econometric methods. So why not use Stata? Before beginning my polemic I should be absolutely clear that Stata users are not bad people: love the sinner, hate the sin. Here begins the sermon. First, Stata is expensive. The price for a Business single-user Stata license is $765 per year.1 If you want support for multicore computing, the price is even higher: an 8-core version of Stata costs $1,395 annually. There is no discount for Government or nonprofits, but as an Oxford faculty member, I can obtain an 8-core version of Stata for the low price of $595 per year. In contrast, the tools that we will learn in this book, mainly R and C++, are completely free. This is particularly important in the modern world of high-performance cluster computing. If you want to run your code on a multicore machine on Amazon, Google, or Microsoft cloud servers, you do not wan to be paying a software license fee for every core that you use. Second, Stata is almost comically behind the times. Let’s see what’s new in Stata version 16, released in February 2020.2 At the top of the list is the LASSO, a wildly popular technique for high-dimensional regression. Rob Tibshirani developed this method in a seminal paper from 1996, so it only took 24 years for it to be incorporated into Stata.3 Fortunately, Tibshirani and his co-authors made it easy for Stata, by releasing open-source software to implement the LASSO and related methods in R over a decade ago.4 Next on the list of new Stata features is linear programming, a technique that came to prominence in the late 1940s.5 Stata 16 also has the ability to call “any Python package”–something you can do for free in R using reticulate or in Python itself for that matter–and “truly reproducible reporting.” Reproducible reporting is incredibly valuable, and it’s something that we’ll cover in detail below. It’s also been available in R, completely free of charge, since at least 2002.6 I suppose we shouldn’t expect too much of a statistical computing package that only added support for matrix programming in 2005, a full 20 years after Stata version 1.0.7 Third, Stata is a black box. Because the underlying source code is kept secret, there’s no way for a Stata user to know for certain what’s happening under the hood. A few years ago I tried to determine precisely what instrument set Stata was using in its implementation of a well-known dynamic panel estimator. The documentation was vague, so resorted to reverse-engineering the Stata results by trial-and-error in R. We never did get the results to match perfectly. In contrast, if you’re not sure what a particular R function or package is doing, you can simply read the source code and find out. Fourth, and most importantly, Stata makes it hard to share with others. If I don’t own a copy of Stata, I can’t replicate your work. Even if I do own a copy of Stata, I still may not be able to so do: Stata’s proprietary binary data formats are updated fairly regularly and do not maintain backwards compatibility. Datafiles created in Stata version 16, for example, cannot be opened in Stata 13. Indeed, depending on the number of variables included in your dataset, Stata 16 files cannot necessarily be opened even in Stata 15. Fortunately, as we’ll see below, intrepid open-source programmers have developed free software to unlock data from Stata’s proprietary and ever-changing binary formats. Why not Matlab? Matlab is much more capable and much less out-of-date than Stata, but many of the same critiques apply: it’s expensive, and it’s not open source. There is an open-source clone called octave. There’s also an open-source C++ library called Armadillo with syntax almost identical to that of Matlab. We’ll see how easy it is to use Armadillo from R with only the rudiments of C++ background. Why R? R is Free R has cutting-edge methods (CRAN task views) R is open-source: you can check the source code for yourself! R supports open science Great community Some Half-truths about R R is slow. This is true, sort of. But then we have amazing tools like Rcpp R is hard to learn. It’s certainly harder to learn than something like STATA, but it’s also much more powerful. Also, Hal Varian’s paper: Economic Incentives in Software Design. Monopolist may make software too easy to learn. Economists don’t use R. Anecdotally, this seems to be a generational divide: open source tools are the norm and there are lots of R packages for econometrics. Why not Julia or Python? On balance, I prefer R/C++ in my day-to-day work but Python and Julia are great options too and you should most certainly give them a try. A good resource aimed at economists is the quantecon.org: https://python.quantecon.org/ and https://julia.quantecon.org/ These figures were accurate as of March 2021. For the latest prices, see https://www.stata.com/order/dl/.↩︎ https://www.stata.com/new-in-stata/↩︎ Tibshirani (1996) - Regression Shrinkage and Selection via the Lasso↩︎ Friedman et al (2010) - Regularization Paths for Generalized Linear Models via Coordinate Descent↩︎ For a history of linear programming, see Dantzig (1983). To be completely fair, the linear programming algorithm implemented in Stata 16 was only developed in 1992, a lag of merely 28 years.↩︎ Reproducible reporting in R started with sweave. These days we have a fantastic successor package called knitr, which I cover below.↩︎ The “Mata” programming language was added in Stata 9: https://www.stata.com/stata9/. For a timeline of Stata versions, see https://www.stata.com/support/faqs/resources/history-of-stata/.↩︎ "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
